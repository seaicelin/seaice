
客户端发送  “hello”， 但是服务端接收的长度是7.
原因是客户端加了换行符。。。。

实际上 readv返回值是包括 “\r\n” 这两个字符的，换行
实际是 buf_1 = “hello\r\n”

	char buf_1[curLen];
	char buf_2[65535];
	struct iovec iv[2];
	iv[0].iov_base = buf_1;
	iv[0].iov_len = curLen;
	iv[1].iov_base = buf_2;
	iv[1].iov_len = 65534;
	int nread = readv(fd, iv, 2);
	cout<<"buf_1 size = " << strlen(buf_1)<<endl;
	cout<<"buf_1 = " << buf_1 << endl;
	cout<<"nread = " << nread << endl;
	cout<<"curLen = " << curLen << endl;
	if(buf_1[5] == '\r' && buf_1[6] == '\n')
	{
		cout<<" right "<< endl;
	}


PS:
#include <sys/uio.h>
ssize_t readv(int filedes, const struct iovec *iov, int iovcnt);
ssize_t writev(int filedes, const struct iovec *iov, int iovcnt);

两个函数的第二个参数都是一个iovec结构体数组的指针：
struct iovec {
  void *iov_base;  /* starting address of buffer */
  size_t iov_len;  /* size of buffer */
};
https://blog.csdn.net/wangquan1992/article/details/108295622

使用read()将数据读到不连续的内存、使用write()将不连续的内存发送出去，要经过多次的调用read、write。
如果要从文件中读一片连续的数据至进程的不同区域，有两种方案：
①使用read()一次将它们读至一个较大的缓冲区中，然后将它们分成若干部分复制到不同的区域；
 ②调用read()若干次分批将它们读至不同区域。同样，如果想将程序中不同区域的数据块连续地写至文件，也必须进行类似的处理。
 缺点：执行系统调用必然使得性能降低。

UNIX网络编程第14章提及，通过使用另外—组接口 readv() / writev()，它们只需一次系统调用就可以实现在文件和进程的多个缓冲区之间传送数据，
免除了多次系统调用或复制数据的开销。这些操作被称为分散读（scatter read）和集合写（gather write）。
