https://www.jianshu.com/p/a4a1b2cc5e66

在程序员的开发生涯中，读写配置文件必不可少。

配置文件有利于我们灵活配置工程，解决大量重复劳动，也方便调试。

配置文件的格式有很多，最简单的有一行一行的文本，也有像 json、xml、protocol buffer 这样结构化的格式，当然也有 yaml 这种格式。

今天的博文介绍的是如何在 C++ 开发中利用 yaml-cpp 开源库读写 yaml 配置文件。

如果有 Python 开发经验的同学，可能知道用 Python 读取 yaml 是再简单不过了，但是 C++ 麻烦一点，它需要你自己下载源码然后编译生成库文件。



yaml
官方的使用教程在这里
https://github.com/jbeder/yaml-cpp/wiki/Tutorial

1.yaml-cpp

yaml-cpp 是一个开源库，地址在 github 上，https://github.com/jbeder/yaml-cpp
yaml-cpp 是通过 CMake 来进行构建和编译的。

在这里假设读者都有 CMake 相关的经验，没有的同学自行百度。我的博文也写过比较简单的几篇，有兴趣的可以去看一看。
如果没有，可以用这段一键脚本源码编译

#!/bin/bash
yum remove cmake -y && rm -f /usr/bin/cmake
wget -c https://github.com/Kitware/CMake/releases/download/v3.14.2/cmake-3.14.2.tar.gz
tar xvf cmake-3.14.2.tar.gz 
cd $(pwd)/cmake-3.14.2
./bootstrap
gmake
gmake install
ln -s /usr/local/bin/cmake /usr/bin/
cmake --version
首先下载源码。
https://github.com/jbeder/yaml-cpp
然后，在源码目录创建一个 build 文件夹。

mkdir build
进入到 build 文件夹，然后执行 cmake 命令。

cd build

cmake ..
make
注意的是 cmake 后面是 ..，这代表从 build 上一层目录查找 CMakeLists.txt ，然后编译的文件都会存放在 build 文件夹，如果对编译的效果不满意，只要删除 build 文件就好了，其他源码目录并不受影响，这是 cmake 编译时的基本套路。

yaml-cpp 默认构建的就是静态库，也就是 unix 类系统下的 .a 文件，如果你想构建动态库的话，就需要在 cmake 时指定。

cmake ..  -D BUILD_SHARED_LIBS=ON //不建议，动态库需要每个部署环境都安装
编译成功后，会生成库文件，你只需要将库文件和头文件拷贝到你自己的工程当中，就可以使用了。

可以看到cmake后make生成了静态库文件



libyaml.a
编译完成后测试一下

make test

test

完全ok

2.需要处理好头文件。

你如果不想每次都到 copy 头文件到不同的工程中，那么你可以将头文件 copy 到系统默认的头文件目录，比如 ubuntu 的地址是 /usr/local/include，将库文件拷贝到系统默认的 lib 文件就好了,比如 ubuntu 是 /usr/local/lib。
其实不用copy到lib，make install会自动把编译出来的头文件保存到/usr/local/lib

make install
我建议每次直接拷贝.a文件到工程项目里。有了头文件和库，我们就可以顺利写代码了。
拷贝include目录，和build目录下的libyaml.a文件
新建一个文件夹也叫yaml-cpp，把include拷进来，再在里面新建一个lib文件夹，把libyaml.a拷贝进去
形成如下结构的文件夹，以后新建项目我们就把它拷贝到第三方静态库文件夹里


mulu

这里我们写一个简单的读取yaml的cpp程序,把我们的静态库目录拷贝进thirdlib文件夹下
项目结构如下

image.png
config.yaml

custom_db:
    db_domain: 10.0.0.8
    db_username: root
    db_passwd: my_passwd
    db_schema: test

redis:
    redis_domain: 10.0.0.10
    redis_passwd: 123456

hello:
    num_config: [1141studio]
    name_config: [powered, by, 1141studio]
hello.cpp

#include <iostream>
#include <string>
#include <stdio.h>
#include <unistd.h>
#include "yaml-cpp/yaml.h"
#include <vector>
const std::string DB_CONF = "config.yaml";
int main(int argc, char * argv[]) {
    /*----------------------------------- test yaml ----------------------------------------*/
    printf("hello world\n");
    std::cout << "this code is only for test yaml" << std::endl;

    /* Node conf. */
    YAML::Node conf = YAML::LoadFile(DB_CONF);
    
    /*----------------------------------- display db_config ----------------------------------------*/
    std::cout << "Database:"<< std::endl;
    std::cout << "domain:  " << conf["custom_db"]["db_domain"].as<std::string>() << std::endl;
    std::cout << "username:" << conf["custom_db"]["db_username"].as<std::string>() << std::endl;
    std::cout << "passwd:  " << conf["custom_db"]["db_passwd"].as<std::string>() << std::endl;
    std::cout << "schema:  " << conf["custom_db"]["db_schema"].as<std::string>() << std::endl;

    /*----------------------------------- display redis ----------------------------------------*/
    std::cout << "Redis" << std::endl;
    std::cout << "redis_domain: " << conf["redis"]["redis_domain"].as<std::string>() << std::endl;
    std::cout << "redis_passwd: " << conf["redis"]["redis_passwd"].as<std::string>() << std::endl;
    
    /*----------------------------------- display hello ----------------------------------------*/
    std::cout << "HelloServer" << std::endl;
    
    /* vector of name string. */
    std::vector<std::string> name_vec = conf["hello"]["num_config"].as<std::vector<std::string> >();
    if(!name_vec.empty())
      std::cout << name_vec[0] << std::endl;
    return 0;
}

编译

g++ -std=c++11 -I./thirdlib/yaml-cpp/include test_db.cpp -L./thirdlib/yaml-cpp/lib -lyaml-cpp -o HelloServer
其中 -Idir让编译器在dir目录搜索头文件include
-Ldir让编译器在dir目录搜索静态库
-lname让编译器链接libname.a的目录


image.png

可以看到成功的读取了yaml文件，以后的配置文件就不用写死在代码里了
更多api可以参考https://cloud.tencent.com/developer/article/1423468
https://www.cnblogs.com/huodaozhe/p/12026327.html

还有类似的json库jsoncpp：https://blog.csdn.net/guotianqing/article/details/94378309

googletest：https://blog.csdn.net/guotianqing/article/details/104055221

mysql： https://blog.csdn.net/LV_YONG/article/details/80584415

https://www.jianshu.com/p/5b80aa05199a

https://www.jianshu.com/p/efdafe4322b9

作者：MachinePlay
链接：https://www.jianshu.com/p/a4a1b2cc5e66
来源：简书
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。